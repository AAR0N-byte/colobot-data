\b;What You Already Know
In the previous exercise you were shown how programming can be useful and why you should continue this course (to avoid death from an alien ambush, obviously). You also gained some precious knowledge about programming in general. Now it's time to learn how to actually write programs. Yay!

\t;Note
This will be a long brief, however, it is necessary for you to grasp the concepts before starting to code. The task for this exercise is quite simple (it's literally one line of code) but don't rush it. Take your time and read carefully the next sections to understand as much as you can. It'll only get harder in the future.

\b;CBOT Editor
Programmers like to use so called Integrated Development Environments, shortly IDEs. They are usually "just" advanced text editors with compilers, debuggers and other fancy tools included, all integrated with each other. They make programmer lives easier thanks to syntax highlighting, keyboard shortcuts, on-the-fly error checking and many more features (it depends on how advanced an IDE is).

CBOT editor is an IDE. Maybe it isn't that much advanced, but it gets the job done and, what is more important, it won't distract you with myriad of options and it won't write/fix code for you. In this course, it is you who should write all the code, not a tool. That's the point of it, unless you want to be a slave of your tools.

At first look the CBOT editor may look like just a normal text editor. It has options like "New" \button 56;, "Open" \button 57;, "Save" \button 58;, "Undo" \button 59;, you can type in it, and so on. However, it also has more interesting buttons and features which make it an IDE, not just an editor.

You should close \button 63; in a moment to view the editor, although do reopen \button 63; before you start writing any code, please.

Use \button 24; to add a new program to the list. Select the new program and then press \button 22; to open it in the editor. At this point, you should see a simple program viewed in the CBOT editor. This program does nothing yet, but you can already compile it by pressing \button 87;. It should show you no errors. Play a little with the editor now, try to figure out what each button does, but don't worry about it that much. After you're done, open your \button 63; again and head on to the next section.

\b;The Structure of CBOT Programs
Here's the source code you should be looking at after opening the editor:
\c;
\s;extern void object::MyFirstProgram()
\s;{
\s;	
\s;	
\s;	
\s;}
\n;
It probably does not make much sense to you, and it probably won't much either even after reading the next few paragraphs, but don't worry about it too much.

\t;The Main Function
Let's start from the middle. \c;MyFirstProgram\n; is the name of the program, simply enough. What might be not so obvious, it is also the name of the main function. You can (and you will) have more functions in your program, but it is the main function that will be executed first and this is also where the program will eventually end. You'll learn about \l;functions\u cbot\function; later, for now just write all your code inside the main function.

\t;How to Name Things
Many things in CBOT must have a name, an  i d e n t i f i e r. An identifier must strict to the following rules:

1. It can only contain letters from the English alphabet, digits, and underscore characters \c;_\n;.
2. It cannot start with a digit.
3. It must not repeat in the same block of code.

Simple, right? Notice that you cannot use spaces! Yet identifiers are often more complicated than one word, but you can write identifiers using \c;PascalCase\n;, \c;camelCase\n;, \c;underscores_as_spaces\n; or whatever style you like. The identifiers don't matter for a computer as long as they follow the rules above. However, they strongly matter for you, other programmers and everyone who will ever read your code. You should use meaningful names so that after two years you can open your old code and figure out what it does. Really, proper naming is important! Also, you should generally prefer to use English words, since English is the language of IT.

We'll be coming back to the naming issue a few times later, as we'll be learning about more things we can actually name. Oh, also try not to get into arguments about naming conventions, just stick to what's best for you or what already was picked for the project. Programmers like to argue about such silly things as "the one and only correct naming convention" in their free time. You may want to listen to our advices about naming but you don't have to. Remember to respect other people's preferences.

\t;\type;\c;object\n;\norm;::
You can actually skip that part, but the main function usually has it anyway, even though it's sometimes unnecessary. It gives you access to often useful information about the robot the program is running on like energy level, shield level, what does it hold, where it is on the map, and so on. We won't be covering that stuff yet as it's not needed at this level, just know that this weird part has its purpose.

\t;\token;\c;extern\n;\norm;
This is a  k e y w o r d  that indicates the \l;main function\u cbot\extern;. Simple as that. There can only be one main function in a program, therefore there should be only one \token;\c;extern\n;\norm; word in the program.

By keyword we usually mean an identifier that is a part of the language and has a specific purpose. You don't have to learn all of them by heart right now, you'll learn them automatically as you write more code.

\t;\type;\c;void\n;\norm;
This is a \l;type\u cbot\type; of the value returned by (being a result of) the main function.

It can be best explained with an example. Imagine a (not main) function called \c;Add\n;, which is just another way to represent the arithmetic \c;+\n; symbol. The result of \c;Add(2, 2)\n; is \c;4\n;. So \c;Add(2, 2)\n; basically means: calculate \c;2 + 2\n; and represent the result, which is \c;4\n;. So \c;Add(2, 2) + Add(1, 4)\n; means \c;4 + 5\n;. We say that the \c;Add\n; function  r e t u r n s  a number, \c;4\n; in this case. This result can be used by another function (for example the main function).

So, what does really the main function return? Nothing. The main function is the first to execute, remember? So there is no function that would use a result from that function, so there is no point in returning anything. We say that the function has nothing to return by specifying the return type as \c;\type;void\norm;\n; before the function name. \c;\type;void\norm;\n; means literally nothing.

\t;Parentheses \c;()\n;
In this case, they indicate that the given identifier is a function. They just must be there.

Inside the curly braces \c;{}\n; is the actual code. But before we jump into coding, just a little more theory. If you don't fully understand the first line of the example code we just went trough, then just skip it for now and return to this section after you beat some of the next chapters. It is not that important for you to know all of the details right now, just remember how the main function looks like and you'll be fine. It is generated for you when you create a new program using the CBOT editor anyway.

\b;Instructions
An  \l;i n s t r u c t i o n\u cbot;  is a command in CBOT. Most of them are just pre-defined functions available for you. You could say that the main function is your own instruction which consists of a sequence of other instructions. Let's see an example.

\t;Moving a robot
One of the available instructions tells the bot to move forward or backward a specified distance. To a person we would say "move 5 meters forward". The number of meters here is a  p a r a m e t e r  of the function \token;\c;\l;move\u cbot\move;\n;\norm;. You can give such commands to a robot using CBOT:

\s;\c;move(5);\n;

The above code means exactly "move 5 meters forward". Parameters of a function are always passed between parentheses \c;()\n;. If there are more parameters, they are separated by commas \c;,\n;, as we've seen in the \c;Add(2,2)\n; example. No, by default there does not exist a function called \c;Add\n; in CBOT, it is just a simple example to illustrate how functions (instructions) work.

We say that we  c a l l  a function when we use it like that.

\t;White spaces
Notice the semicolon (\c;;\n;) at the end of the line. It explicitly says that this is the end of a  \l;s t a t e m e n t\u cbot\term; -- one step of an algorithm.

"Why is it, can't CBOT know the end of a statement based on the end of the line?", you might ask. Technically, we could make it that way and some languages are built that way, but many compilers ignore all  w h i t e  s p a c e s  (invisible characters, like a space, tabulator or new line). Arguably, it makes programs more readable and easier to write by giving the freedom of formatting to the programmer. You may have a different opinion about it, but that's how it works in many languages, including CBOT.

Because of ignoring all white spaces, those languages must have some way to distinguish each statement from each other. In CBOT (like in Java or C++), it is done by using semicolons and curly braces.

\t;Blocks
You must put your instructions in the  b o d y  of the main function. The body of a function is between \c;{\n; and \c;}\n;. The content between curly braces we can call also more generally a \l;block\u cbot\bloc;. The body of the function should be put immediately after the  d e c l a r a t i o n (the first line).

For example, if you want your robot to move 3 meters forward, you can write a program like this one:
\c;
\s;extern void object::Example()
\s;{
\s;	
\s;	move(3);
\s;	
\s;}
\n;
Program immediately ends after all instructions are done and it reaches the end of the body (block) of the main function (\c;}\n;).

\b;Task
There is a lot of theory and words to learn in this exercise. This is really the point of it, so reread it if you need and make sure you understand as much as you can, although don't go into details too much, they'll reveal themselves during the real coding.

When you feel ready, here's your task: write and run a program that commands \l;the bot\u object/bottr; to move 15 meters forward.

Additional, recommended exercises for this level: rename the main function, remove some parts of the program and see if it still works, try to brake the program in as many ways as you can think of, put the \c;move();\n; instruction outside of the main function.

\t;Tip (Reminder)
If your program did not work, you can always quickly reset everything to the initial state by clicking on \button 9; while a bot is selected.
