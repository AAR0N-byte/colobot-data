\b;What You Already Know
You had enough reading in the previous exercise, didn't you? But you are here now, creating your own programs, understanding declarations of \l;functions\u cbot/function;, using whitespaces, \l;instructions\u cbot;, keywords, identifiers, IDEs, \l;types\u cbot/type;, compiling code... That's amazing, and surely you should feel amazing, even if you think you don't understand all that crazy stuff yet.

In fact, you did so well that it's time to let you do something completely on your own! Don't be scared, you can do it. Read today's lesson and do your best to get the task done!

\b;Programming Is About Experimenting and Discovery
If you want to be a programmer, you need to be creative. Sure, there are a lot of tutorials out there, but they may not be of good quality, they might be outdated or just wrong. They are good for learning the basics, however there is always time in the life's of a man when one wants to actually accomplish something. Like writing a program for a robot to fight real-life aliens. I'm pretty sure there are not tutorials for that (yet).

What can you do if there are no resources? Experiment! If you don't understand something fully, then give it a try. For example, what would happen if you gave the \c;Add\n; function letters instead of numbers? Does it work with fractions? Well, obviosly you can't test that particular function since it exists only in our imagination, but you get what's the point. By experimenting you can discover new things and you'd get more ideas how to use them for your purposes.

Don't be afraid to experiment. (Unless you write a program for a rocket or airliner, you really shouldn't experiment on those...)

\b;Documentation Is Your Best Friend
Experimenting is all fun and so on, but there is usually a place where you can find a lot of useful technical information. You should often look at documentation, especially if you're in doubt. Good programmers don't need to have an outstanding memory, they need to know how to search for information they seek and how to use it. You'll remember the details automatically anyway, if you use them often.

You've probably already noticed the book icon on the left. Yes, this is exactly what we're talking about, this is the documentation of CBOT. You'll find there almost everything what CBOT can do and what it can't do. You don't need to remember all this stuff, you just must know that it's there and that this is the place where you should look first for an answer to your potential questions during coding. Even if they're like "how to spell mov?".

\b;Task
Our \l;robotic friend\u object/bottr; decided to sleep during classes. We shall contact his engineers immediately! Give him a little push to wake him up. Your \l;robot\u object/bottr; should have enough strength to do that.

Don't forget, both robots need to be on the \l;goal areas\u object/goal; before we let you through to the next exercise. Your goal is 15 meters ahead from your starting position, as previously. The indolent bot will get there by himself after waking up.

\t;Hint
Take a look at the documentation of the \token;\l;move();\u cbot/move;\norm; function.
